
LED-Matrix-Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  0000013c  000001b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001ba  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006f5  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ed  00000000  00000000  0000094d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f3  00000000  00000000  00000f3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001230  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003de  00000000  00000000  00001284  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000112  00000000  00000000  00001662  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001774  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 41 00 	jmp	0x82	; 0x82 <__vector_1>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e3       	ldi	r30, 0x3C	; 60
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 71 00 	call	0xe2	; 0xe2 <main>
  7a:	0c 94 9c 00 	jmp	0x138	; 0x138 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__vector_1>:

volatile unsigned char pattern_P[8] = { 0b11111111, 0b00000000, 0b00000000, 0b00100111, 0b00100111, 0b00000111, 0b00000111, 0b11111111};
volatile unsigned char params= 0b10000000;
volatile unsigned char toggle = 1;

ISR(INT0_vect){
  82:	1f 92       	push	r1
  84:	0f 92       	push	r0
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	0f 92       	push	r0
  8a:	11 24       	eor	r1, r1
  8c:	8f 93       	push	r24
	toggle = ~toggle;
  8e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  92:	80 95       	com	r24
  94:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
}
  98:	8f 91       	pop	r24
  9a:	0f 90       	pop	r0
  9c:	0f be       	out	0x3f, r0	; 63
  9e:	0f 90       	pop	r0
  a0:	1f 90       	pop	r1
  a2:	18 95       	reti

000000a4 <_Z13drawPattern_Pv>:


void drawPattern_P(){
	PORTA = params;
  a4:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <params>
  a8:	8b bb       	out	0x1b, r24	; 27
	for (int i=0; i<8; i++){
  aa:	20 e0       	ldi	r18, 0x00	; 0
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	28 30       	cpi	r18, 0x08	; 8
  b0:	31 05       	cpc	r19, r1
  b2:	b4 f4       	brge	.+44     	; 0xe0 <_Z13drawPattern_Pv+0x3c>
		PORTB = pattern_P[i];
  b4:	f9 01       	movw	r30, r18
  b6:	ee 59       	subi	r30, 0x9E	; 158
  b8:	ff 4f       	sbci	r31, 0xFF	; 255
  ba:	80 81       	ld	r24, Z
  bc:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	86 ea       	ldi	r24, 0xA6	; 166
  c0:	8a 95       	dec	r24
  c2:	f1 f7       	brne	.-4      	; 0xc0 <_Z13drawPattern_Pv+0x1c>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <_Z13drawPattern_Pv+0x22>
		_delay_ms(.5);
		PORTA = PORTA>>1;
  c6:	8b b3       	in	r24, 0x1b	; 27
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	95 95       	asr	r25
  cc:	87 95       	ror	r24
  ce:	8b bb       	out	0x1b, r24	; 27
		if (!PORTA)
  d0:	8b b3       	in	r24, 0x1b	; 27
  d2:	81 11       	cpse	r24, r1
  d4:	02 c0       	rjmp	.+4      	; 0xda <_Z13drawPattern_Pv+0x36>
		{
			PORTA = 0b10000000;
  d6:	80 e8       	ldi	r24, 0x80	; 128
  d8:	8b bb       	out	0x1b, r24	; 27
}


void drawPattern_P(){
	PORTA = params;
	for (int i=0; i<8; i++){
  da:	2f 5f       	subi	r18, 0xFF	; 255
  dc:	3f 4f       	sbci	r19, 0xFF	; 255
  de:	e7 cf       	rjmp	.-50     	; 0xae <_Z13drawPattern_Pv+0xa>
  e0:	08 95       	ret

000000e2 <main>:
	}
}

int main(void)
{
    DDRA = 0xFF;
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	8a bb       	out	0x1a, r24	; 26
    DDRB = 0xFF;
  e6:	87 bb       	out	0x17, r24	; 23
	
	GICR = (1<<INT0);
  e8:	80 e4       	ldi	r24, 0x40	; 64
  ea:	8b bf       	out	0x3b, r24	; 59
	MCUCR = MCUCR & 0b00000011;
  ec:	85 b7       	in	r24, 0x35	; 53
  ee:	83 70       	andi	r24, 0x03	; 3
  f0:	85 bf       	out	0x35, r24	; 53
	sei();
  f2:	78 94       	sei
	
    while (1) 
    {
		for(int i=0; i<50; i++){
  f4:	c0 e0       	ldi	r28, 0x00	; 0
  f6:	d0 e0       	ldi	r29, 0x00	; 0
  f8:	c2 33       	cpi	r28, 0x32	; 50
  fa:	d1 05       	cpc	r29, r1
  fc:	24 f4       	brge	.+8      	; 0x106 <main+0x24>
			drawPattern_P();
  fe:	0e 94 52 00 	call	0xa4	; 0xa4 <_Z13drawPattern_Pv>
	MCUCR = MCUCR & 0b00000011;
	sei();
	
    while (1) 
    {
		for(int i=0; i<50; i++){
 102:	21 96       	adiw	r28, 0x01	; 1
 104:	f9 cf       	rjmp	.-14     	; 0xf8 <main+0x16>
			drawPattern_P();
		}
		
		if((toggle & 0b00000001)){
 106:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 10a:	80 ff       	sbrs	r24, 0
 10c:	f3 cf       	rjmp	.-26     	; 0xf4 <main+0x12>
 10e:	8f e1       	ldi	r24, 0x1F	; 31
 110:	9e e4       	ldi	r25, 0x4E	; 78
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <main+0x30>
 116:	00 c0       	rjmp	.+0      	; 0x118 <main+0x36>
 118:	00 00       	nop
			_delay_ms(80);	
			params = params >> 1;
 11a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <params>
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	95 95       	asr	r25
 122:	87 95       	ror	r24
 124:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <params>
			if(!params){
 128:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <params>
 12c:	81 11       	cpse	r24, r1
 12e:	e2 cf       	rjmp	.-60     	; 0xf4 <main+0x12>
				params = 0b10000000;
 130:	80 e8       	ldi	r24, 0x80	; 128
 132:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <params>
 136:	de cf       	rjmp	.-68     	; 0xf4 <main+0x12>

00000138 <_exit>:
 138:	f8 94       	cli

0000013a <__stop_program>:
 13a:	ff cf       	rjmp	.-2      	; 0x13a <__stop_program>
