
A2-B1-Practice-Week5-Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000011c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006d2  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005be  00000000  00000000  000008ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b0  00000000  00000000  00000e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000113c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c4  00000000  00000000  00001160  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ea  00000000  00000000  00001524  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000160e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 8c 00 	jmp	0x118	; 0x118 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <util/delay.h>


int main(void)
{
	DDRC = 0b11010011;
  6c:	83 ed       	ldi	r24, 0xD3	; 211
  6e:	84 bb       	out	0x14, r24	; 20
	DDRA = 0b00000000;
  70:	1a ba       	out	0x1a, r1	; 26
	
	unsigned char count = 0;
	PORTC = 0b00010000;
  72:	80 e1       	ldi	r24, 0x10	; 16
  74:	85 bb       	out	0x15, r24	; 21
	int up = 1;
  76:	61 e0       	ldi	r22, 0x01	; 1
  78:	70 e0       	ldi	r23, 0x00	; 0
int main(void)
{
	DDRC = 0b11010011;
	DDRA = 0b00000000;
	
	unsigned char count = 0;
  7a:	50 e0       	ldi	r21, 0x00	; 0
	PORTC = 0b00010000;
	int up = 1;
	
	while (1)
	{
		unsigned char input = PINA;
  7c:	89 b3       	in	r24, 0x19	; 25
		if((input&0b00000001)==0){
  7e:	80 fd       	sbrc	r24, 0
  80:	27 c0       	rjmp	.+78     	; 0xd0 <main+0x64>
			if(up==1){
  82:	61 30       	cpi	r22, 0x01	; 1
  84:	71 05       	cpc	r23, r1
  86:	21 f4       	brne	.+8      	; 0x90 <main+0x24>
				count++;
  88:	5f 5f       	subi	r21, 0xFF	; 255
				if(count==16){
  8a:	50 31       	cpi	r21, 0x10	; 16
  8c:	21 f4       	brne	.+8      	; 0x96 <main+0x2a>
  8e:	02 c0       	rjmp	.+4      	; 0x94 <main+0x28>
					count = 0;
				}
			}
			else{
				count--;
  90:	51 50       	subi	r21, 0x01	; 1
  92:	01 c0       	rjmp	.+2      	; 0x96 <main+0x2a>
		unsigned char input = PINA;
		if((input&0b00000001)==0){
			if(up==1){
				count++;
				if(count==16){
					count = 0;
  94:	50 e0       	ldi	r21, 0x00	; 0
				if (count<0){
					count = 15;
				}
			}
			unsigned char bit_10 = (count&0b00000011);
			unsigned char bit_76 = ((count<<4)&0b11000000);
  96:	90 e1       	ldi	r25, 0x10	; 16
  98:	59 9f       	mul	r21, r25
  9a:	90 01       	movw	r18, r0
  9c:	11 24       	eor	r1, r1
  9e:	42 2f       	mov	r20, r18
  a0:	40 7c       	andi	r20, 0xC0	; 192
			unsigned char up_down = ((up<<4)&0b00010000);
  a2:	9b 01       	movw	r18, r22
  a4:	22 95       	swap	r18
  a6:	32 95       	swap	r19
  a8:	30 7f       	andi	r19, 0xF0	; 240
  aa:	32 27       	eor	r19, r18
  ac:	20 7f       	andi	r18, 0xF0	; 240
  ae:	32 27       	eor	r19, r18
  b0:	92 2f       	mov	r25, r18
  b2:	90 71       	andi	r25, 0x10	; 16
			PORTC = bit_10|bit_76|up_down;
  b4:	25 2f       	mov	r18, r21
  b6:	23 70       	andi	r18, 0x03	; 3
  b8:	24 2b       	or	r18, r20
  ba:	29 2b       	or	r18, r25
  bc:	25 bb       	out	0x15, r18	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	2f e9       	ldi	r18, 0x9F	; 159
  c0:	36 e8       	ldi	r19, 0x86	; 134
  c2:	91 e0       	ldi	r25, 0x01	; 1
  c4:	21 50       	subi	r18, 0x01	; 1
  c6:	30 40       	sbci	r19, 0x00	; 0
  c8:	90 40       	sbci	r25, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <main+0x58>
  cc:	00 c0       	rjmp	.+0      	; 0xce <main+0x62>
  ce:	00 00       	nop
			_delay_ms(500);
		}
		if((input & 0b00000010)==0){
  d0:	81 fd       	sbrc	r24, 1
  d2:	d4 cf       	rjmp	.-88     	; 0x7c <main+0x10>
			up = up^1;
  d4:	21 e0       	ldi	r18, 0x01	; 1
  d6:	62 27       	eor	r22, r18
			count=count^1;
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	58 27       	eor	r21, r24
			unsigned char bit_10 = (count&0b00000011);
  dc:	45 2f       	mov	r20, r21
  de:	43 70       	andi	r20, 0x03	; 3
			unsigned char bit_76 = ((count<<4)&0b11000000);
  e0:	80 e1       	ldi	r24, 0x10	; 16
  e2:	58 9f       	mul	r21, r24
  e4:	90 01       	movw	r18, r0
  e6:	11 24       	eor	r1, r1
  e8:	20 7c       	andi	r18, 0xC0	; 192
			unsigned char up_down = ((up<<4)&0b00010000);
  ea:	cb 01       	movw	r24, r22
  ec:	82 95       	swap	r24
  ee:	92 95       	swap	r25
  f0:	90 7f       	andi	r25, 0xF0	; 240
  f2:	98 27       	eor	r25, r24
  f4:	80 7f       	andi	r24, 0xF0	; 240
  f6:	98 27       	eor	r25, r24
  f8:	98 2f       	mov	r25, r24
  fa:	90 71       	andi	r25, 0x10	; 16
			PORTC = bit_10|bit_76|up_down;
  fc:	84 2f       	mov	r24, r20
  fe:	82 2b       	or	r24, r18
 100:	89 2b       	or	r24, r25
 102:	85 bb       	out	0x15, r24	; 21
 104:	9f e9       	ldi	r25, 0x9F	; 159
 106:	26 e8       	ldi	r18, 0x86	; 134
 108:	31 e0       	ldi	r19, 0x01	; 1
 10a:	91 50       	subi	r25, 0x01	; 1
 10c:	20 40       	sbci	r18, 0x00	; 0
 10e:	30 40       	sbci	r19, 0x00	; 0
 110:	e1 f7       	brne	.-8      	; 0x10a <main+0x9e>
 112:	00 c0       	rjmp	.+0      	; 0x114 <main+0xa8>
 114:	00 00       	nop
 116:	b2 cf       	rjmp	.-156    	; 0x7c <main+0x10>

00000118 <_exit>:
 118:	f8 94       	cli

0000011a <__stop_program>:
 11a:	ff cf       	rjmp	.-2      	; 0x11a <__stop_program>
